package com.x12q.randomizer.ir_plugin

import com.tschuchort.compiletesting.KotlinCompilation
import com.x12q.randomizer.RandomConfig
import com.x12q.randomizer.ir_plugin.base.BaseObjects
import com.x12q.randomizer.test.util.assertions.runMain
import io.kotest.matchers.nulls.shouldNotBeNull
import io.kotest.matchers.shouldBe
import org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi
import org.jetbrains.kotlin.ir.types.classFqName
import org.jetbrains.kotlin.ir.util.companionObject
import org.jetbrains.kotlin.ir.util.functions
import kotlin.test.Test

/**
 * This test the existence of declarations generated by front end extension.
 */
@OptIn(ExperimentalCompilerApi::class)
class TopFrontEndDeclaration {
    @Test
    fun `random functions exist`() {

        testGeneratedCodeUsingStandardPlugin(
            """
                import com.x12q.randomizer.DefaultRandomConfig
                import com.x12q.randomizer.annotations.Randomizable

                fun main(){
                }

                @Randomizable(
                    randomConfig = DefaultRandomConfig::class
                )
                data class Q123(val i:Int)
            """,
            fileName = "main.kt"
        ) {
            afterVisitClassNew = { irClass, statement, irPluginContext ->
                if (irClass.name.toString() == "Q123") {
                    val companionObj = irClass.companionObject()
                    companionObj.shouldNotBeNull()

                    /**
                     * test the existence of the first random() function
                     */
                    val randomFunction = companionObj.functions.firstOrNull {
                        it.name == BaseObjects.randomFunctionName && it.valueParameters.size == 1
                    }

                    randomFunction.shouldNotBeNull()
                    randomFunction.returnType.classFqName.toString() shouldBe "Q123"
                    randomFunction.body.shouldNotBeNull()

                    /**
                     * Test the existence of the 2nd random(randomConfig) function
                     */
                    val randomFunctionWithRandomConfig = companionObj.functions.firstOrNull {
                        it.name == BaseObjects.randomFunctionName && it.valueParameters.size == 1
                    }
                    randomFunctionWithRandomConfig.shouldNotBeNull()

                }
            }
            testCompilation = { result ->
                result.exitCode shouldBe KotlinCompilation.ExitCode.OK
            }
        }
    }

    @Test
    fun `random functions with generics exist`() {

        testGeneratedCodeUsingStandardPlugin(
            """
                import com.x12q.randomizer.DefaultRandomConfig
                import com.x12q.randomizer.annotations.Randomizable

                fun main(){
                }

                @Randomizable(
                    randomConfig = DefaultRandomConfig::class
                )
                data class Q123<T>(val i:Int,val t:T?)
            """,
            fileName = "main.kt"
        ) {
            afterVisitClassNew = { irClass, statement, irPluginContext ->
                if (irClass.name.toString() == "Q123") {
                    val companionObj = irClass.companionObject()
                    companionObj.shouldNotBeNull()

                    /**
                     * test the existence of the first random(randomT:()->T, ...) function
                     */
                    val randomFunction = companionObj.functions.firstOrNull {
                        val signatureOk = it.name == BaseObjects.randomFunctionName && it.valueParameters.size == 1
                        if(signatureOk){
                            val valueParametersAreCorrect = run {
                                it.valueParameters[0].type.classFqName.toString() == kotlin.Function0::class.qualifiedName
                            }
                            valueParametersAreCorrect
                        }else{
                            false
                        }
                    }

                    randomFunction.shouldNotBeNull()
                    randomFunction.returnType.classFqName.toString() shouldBe "Q123"
                    randomFunction.body.shouldNotBeNull()

                    /**
                     * Test the existence of the 2nd random(randomConfig,randomT:()->T, ...) function
                     */
                    val randomFunctionWithRandomConfig = companionObj.functions.firstOrNull {
                        val signatureIsOk = it.name == BaseObjects.randomFunctionName && it.valueParameters.size ==2
                        if(signatureIsOk){
                            val valueParamsAreCorrect = run {
                                val param1IsCorrect = it.valueParameters[0].type.classFqName.toString() == RandomConfig::class.qualifiedName
                                val param2IsCorrect = it.valueParameters[1].type.classFqName.toString() == kotlin.Function0::class.qualifiedName
                                param1IsCorrect && param2IsCorrect
                            }
                            valueParamsAreCorrect
                        }else{
                            false
                        }
                    }
                    randomFunctionWithRandomConfig.shouldNotBeNull()

                }
            }
            testCompilation = { result ->
                result.exitCode shouldBe KotlinCompilation.ExitCode.OK
            }
        }
    }
}
